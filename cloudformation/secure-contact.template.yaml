AWSTemplateFormatVersion: '2010-09-09'
Description: Run the SecureContact Monitor in AWS

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Security
      Parameters:
      - SSHAccessCidr
    - Label:
        default: Networking
      Parameters:
      - VpcId
      - LoadBalancerSubnets
      - InstanceSubnets
    - Label:
        default: AWS Configuration
      Parameters:
      - AMI
      - Stage
      - PublicBucket
    - Label:
        default: Other
      Parameters:
      - AlertEmail

Mappings:
  Constants:
    Stack:
      Value: secure-contact
    App:
      Value: monitor

Parameters:
  SSHAccessCidr:
    Description: A CIDR from which access to the instance is allowed
    AllowedPattern: ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$
    ConstraintDescription: Parameter should be a CIDR block e.g. "1.2.3.4/32"
    Type: String

  VpcId:
    Description: ID of the VPC onto which to launch the stack
    Type: AWS::EC2::VPC::Id
  LoadBalancerSubnets:
    Description: Subnets to use in VPC for public ELB
    Type: List<AWS::EC2::Subnet::Id>
  InstanceSubnets:
    Description: Subnets to use in VPC for instances
    Type: List<AWS::EC2::Subnet::Id>

  AMI:
    Description: Base AMI for SecureContact instances
    Type: AWS::EC2::Image::Id
  Stage:
    Description: Application stage
    Type: String
    AllowedValues:
    - PROD
    - CODE
    - DEV
    Default: CODE

  PublicBucket:
    Description: Name of the public S3 bucket that hosts the website
    Type: String

  AlertEmail:
    Description: Email notified if the healtcheck failed
    Type: String


Resources:

  SecureDropBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: S3 bucket that holds the site content
      Name: !Sub /secure-contact/${Stage}/securedrop-public-bucket
      Type: String
      Value: !Ref PublicBucket

  # if you update this then you should also update the dev_database script
  MonitorHistoryTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub MonitorHistory-${Stage}
      AttributeDefinitions:
        - AttributeName: CheckTime
          AttributeType: N
        - AttributeName: Outcome
          AttributeType: S
      KeySchema:
        - AttributeName: CheckTime
          KeyType: HASH
        - AttributeName: Outcome
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: ExpirationTime
        Enabled: true
      Tags:
        - Key: Stack
          Value:
            Fn::FindInMap: [ Constants, Stack, Value ]
        - Key: App
          Value:
            Fn::FindInMap: [ Constants, App, Value ]
        - Key: Stage
          Value: !Ref Stage
        - Key: Name
          Value: !Sub ${AWS::StackName}

# ----------------------- #
#  LOADBALANCER           #
# ----------------------- #

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Secure Contact Security Group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SSHAccessCidr
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHAccessCidr
      Tags:
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
      - Key: Stage
        Value: !Ref Stage
      - Key: Name
        Value: !Sub ${AWS::StackName} LoadBalancer

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: 80
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/index.html
        HealthyThreshold: 2
        UnhealthyThreshold: 10
        Interval: 30
        Timeout: 20
      Subnets:
        Ref: LoadBalancerSubnets
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      Tags:
        - Key: Stack
          Value:
            Fn::FindInMap: [ Constants, Stack, Value ]
        - Key: App
          Value:
            Fn::FindInMap: [ Constants, App, Value ]
        - Key: Stage
          Value: !Ref Stage
        - Key: Name
          Value: !Sub ${AWS::StackName}

# ----------------------- #
#  APPLICATION SERVER     #
# ----------------------- #

  SecureContactInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref SecureContactInstanceRole

  SecureContactInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: instance-policy
        PolicyDocument:
          Statement:
            # fetch parameters according to stage
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource:
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/securedrop-url
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/secure-contact/${Stage}/*
            # send email alerts from validated addresses
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"
            # allow service to update the website configuration
            - Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${PublicBucket}
                - !Sub arn:aws:s3:::${PublicBucket}/*
              Action:
                - S3:PutBucketWebsite
                - S3:PutObject
            # allow instance to read from and append to the database table
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:BatchGetItem
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:DescribeTable
              Resource:
                - Fn::GetAtt: [ MonitorHistoryTable, Arn ]

  # Minimal policy to run commands via ssm and use ssm-scala
  SSMRunCommandPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ssm-run-command
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource: "*"
          Action:
          - ec2messages:AcknowledgeMessage
          - ec2messages:DeleteMessage
          - ec2messages:FailMessage
          - ec2messages:GetEndpoint
          - ec2messages:GetMessages
          - ec2messages:SendReply
          - ssm:UpdateInstanceInformation
          - ssm:ListInstanceAssociations
          - ssm:DescribeInstanceProperties
          - ssm:DescribeDocumentParameters
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
      Roles:
      - !Ref SecureContactInstanceRole

  # Describe instance tags, to find out its own stack, app, stage
  DescribeTagsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: describe-tags-policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource: "*"
          Action:
            - autoscaling:DescribeAutoScalingInstances
            - autoscaling:DescribeAutoScalingGroups
            - ec2:DescribeRegions
            - ec2:DescribeTags
      Roles:
      - !Ref SecureContactInstanceRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecureContact EC2 instance
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      # allow ELB to talk to instance
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      SecurityGroupEgress:
      # allow instance to make http requests
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
      - Key: Stage
        Value: !Ref Stage
      - Key: Name
        Value: !Sub ${AWS::StackName} Instance

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: AMI
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType: t3.micro
      IamInstanceProfile:
        Ref: SecureContactInstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ev

          echo ${Stage} > /etc/stage

          # install tor according to the offical guide: https://2019.www.torproject.org/docs/debian.html.en
          apt-get update && apt-get install -y apt-transport-https
          echo "deb https://deb.torproject.org/torproject.org bionic main" | tee -a /etc/apt/sources.list.d/tor.list
          curl https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import
          gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -
          apt-get update && apt-get install -y tor deb.torproject.org-keyring

          # Check that tor is running before we proceed
          until $(curl -s -o /dev/null --head --fail --socks5-hostname 127.0.0.1:9050 https://check.torproject.org); do
              printf '.'
              sleep 3
          done

          # install application
          mkdir /secure-contact
          git clone https://github.com/guardian/secure-contact /secure-contact

          # install python packages and run monitor once
          cd /secure-contact
          pip3 install -r /secure-contact/requirements.txt
          python3 -m src.monitor

          # fix permissions
          chown -R www-data /secure-contact/

          # add nginx configuration
          cd /etc/nginx/sites-available/
          cat <<SECURE_CONTACT_CONF > secure-contact
          server {
            listen 80 default_server;
            listen [::]:80 default_server ipv6only=on;

            root /secure-contact/build;
            index index.html;
            add_header Strict-Transport-Security "max-age=15552000";

            location ~ /(data|lib|tmp|tpl)/ {
              deny all;
              return 404;
            }
          }
          SECURE_CONTACT_CONF
          cd /etc/nginx/sites-enabled/
          ln -s /etc/nginx/sites-available/secure-contact secure-contact

          nginx -s reload

          # schedule monitoring service to run on every hour
          touch /secure-contact/cron-lastrun.log
          chown www-data /secure-contact/cron-lastrun.log
          echo '*/20 * * * * cd /secure-contact && python3 -m src.monitor > /secure-contact/cron-lastrun.log 2>&1' | crontab -u www-data -


  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: InstanceSubnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
      - Ref: LoadBalancer
      Tags:
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
        PropagateAtLaunch: true
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
        PropagateAtLaunch: true
      - Key: Stage
        Value: !Ref Stage
        PropagateAtLaunch: true
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: true

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub Secure Contact ${Stage} notification topic
      Subscription:
        - Endpoint: !Ref AlertEmail
          Protocol: email

  NotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - SNS:Publish
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: "*"
      Topics:
        - !Ref NotificationTopic

Outputs:
  LoadBalancerUrl:
    Value: !GetAtt LoadBalancer.DNSName

  TopicName:
    Value: !GetAtt NotificationTopic.TopicName